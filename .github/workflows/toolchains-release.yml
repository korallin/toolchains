name: ToolchainsRelease

on:
  push:
    tags:
    - 'v*'

jobs:
  archlinux:
    env:
        DIST_ID: archlinux
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done

  centos7:
    env:
        DIST_ID: centos7
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done


  fedora29:
    env:
        DIST_ID: fedora29
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done


  gentoo-amd64:
    env:
        DIST_ID: gentoo-amd64
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done


  mint19-amd64:
    env:
        DIST_ID: mint19-amd64
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done


  ubuntu16_04:
    env:
        DIST_ID: ubuntu16.04
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done


  ubuntu18_04:
    env:
        DIST_ID: ubuntu18.04
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build
      run: ./build-docker-${DIST_ID}.sh

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true 
        artifacts: "docker/distros/*/*.tar.*"
        artifactContentType: "application/gzip" 
        draft: false
        name: "Release ${{ github.ref }}"
        prerelease: true
        tag: ${{ github.ref }} 
        token: ${{ secrets.GITHUB_TOKEN }} 

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: Release ${{ github.ref }}
    #    draft: false
    #    prerelease: false

    #- name: Upload Release Assets
    #  run: |
    #    for f in docker/distros/*/*.tar.* ;\
    #    do \
    #        filename=$(basename $f) ;\
    #        url=$(echo '${{ steps.create_release.outputs.upload_url }}' | sed "s:{?name,label}:?name=$filename:");\
    #        echo curl --request POST \
    #        --url $url \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/gzip' \
    #        --form "data=@$f" ;\
    #    done
